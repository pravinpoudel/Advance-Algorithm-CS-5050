{"version":3,"sources":["Nims.js"],"names":["require","performance","createCsvWriter","createObjectCsvWriter","csvWriter","records","t0","winner","i","executionTime","regeneratorRuntime","async","_context","prev","next","path","header","id","title","number","time","now","n","t1","awrap","writeRecords","console","log","stop","err","error"],"mappings":"0BAAwBA,QAAQ,cAAxBC,qBAAAA,YAEFC,gBAF0BF,QAAA,cAEcG,sBAE9C,KAFA,WAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAIUV,EAAYF,gBAAgB,CAFlCa,KAAA,uBACDC,OAAA,CAAA,CAAAC,GAAA,SAAAC,MAAA,mBAAA,CAAAD,GAAA,OAAAC,MAAA,2BAGGF,EAAM,CAAA,CACJG,OAAA,KAAAC,KAAA,KAAgBF,EAAAA,YAAOG,MAErBJ,EAAE,SAAFA,EAAIK,GACJJ,OAAAA,GAAAA,GAIAb,GAAAA,KAXPE,EAAAe,EAAA,IAAAf,EAAAe,EAAA,KAeOf,EAAAA,EAlBV,KAAA,EAAA,GAGGC,EAegB,IAlBnB,OAmBMD,EAAAC,GACEe,GAAAtB,YAAOoB,MACRZ,GAAAc,GAAAjB,GAAA,IAWDD,EAAQ,GAAGc,OAASX,EAVpBH,EAAA,GAAAe,KAAAX,EAtBNG,EAAAE,KAAA,GAAAJ,mBAAAc,MAuBQpB,EAAAqB,aAAApB,IAvBRO,EAAAE,KAAA,GAAA,MAAA,KAAA,GAwBOY,QAAAC,IAAA,WAAAlB,EAAA,MAxBP,KAAA,GAkBmBD,IAlBnBI,EAAAE,KAAA,EAAA,MAAA,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAgB,UAAA,GA0BK,MAAAC,GAEQrB,MAWXkB,QAAQI,MAAMD,GAXHrB","file":"Nims.min.js","sourcesContent":["const { performance } = require(\"perf_hooks\");\r\n\r\nconst createCsvWriter = require(\"csv-writer\").createObjectCsvWriter;\r\n\r\ntry {\r\n  (async () => {\r\n    const csvWriter = createCsvWriter({\r\n      path: \"files/timeRecord.csv\",\r\n      header: [\r\n        { id: \"number\", title: \"Number of items\" },\r\n        {\r\n          id: \"time\",\r\n          title: \"execution time (sec)\",\r\n        },\r\n      ],\r\n    });\r\n    const records = [{ number: null, time: \"\" }];\r\n\r\n    let t0 = performance.now();\r\n\r\n    const winner = (n) => {\r\n      if (n == 0) {\r\n        return true;\r\n      }\r\n      if (n == 1) {\r\n        return false;\r\n      }\r\n      return !(winner(n - 1) && winner(n - 2));\r\n    };\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      winner(i);\r\n      t1 = performance.now();\r\n      const executionTime = (t1 - t0) / 1000.0;\r\n      records[0].number = i;\r\n      records[0].time = executionTime;\r\n      await csvWriter.writeRecords(records);\r\n      console.log(\"time is \" + executionTime + \" s\");\r\n    }\r\n  })();\r\n} catch (err) {\r\n  console.error(err);\r\n  throw err;\r\n}\r\n"]}