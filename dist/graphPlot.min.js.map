{"version":3,"sources":["graphPlot.js"],"names":["margin","top","right","bottom","left","width","height","d3","scaleLinear","range","y","title","scaleLog","base","domain","line","x","d","number","select","append","attr","text","svg","csv","err","console","concat","value","data","max","axisLeft","error","forEach","Number","executionTime","extent","log","_typeof","lines","call","axisBottom"],"mappings":"8PACA,IAAMA,OAAS,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACjDC,MAAQ,IAAML,OAAOI,KAAOJ,OAAOE,MACnCI,OAAS,IAAMN,OAAOC,IAAMD,OAAOG,OAFnCH,MAAS,qDAAWE,EAAKK,GAAhBC,cAAAC,MAAA,CAAA,EAAAJ,QAAfK,EAAAH,GAAAC,cAAAC,MAAA,CAAAH,OAAA,IASII,OALEC,EAAAA,GAAKC,WAAGC,KAAA,IAAAC,OAAA,CAAA,EAAA,MAAAL,MAAA,CAAAH,OAAd,IAKWE,GAORO,OAJHC,EAAK,SAAMJ,GAMP,OAAOI,EAAEC,EAAEC,UAAXR,EAAA,SAAWQ,GAHH,OAKPR,EAAAO,EAAUA,kBAIfV,GAAGY,OAAO,QAAQC,OAAO,MAAMC,KAAK,QAAS,eAAeC,KAAKX,OAEjE,IAAIY,IAAMhB,GASPY,OAAH,QASGC,OAAH,OASGI,KAAI,QAAA,KACLH,KAAII,SAAK,KACPC,OAAAA,KACAL,KAAA,YA9BM,cAAAM,OA8BN3B,OAAAI,KA9BM,OAAAuB,OA8BN3B,OAAAC,IA9BM,MAgCR2B,IACER,OAAA,QACAS,KAAI,QAAJ,eACAA,KAHF,YAMEf,aAEGgB,GAAIF,MAAO,KAAAtB,OAAaN,OAAAC,IAAA,IAAA,KAA3BqB,KAFF,+BASII,IACAN,OAAA,QAFFC,KADF,QAAA,eAOAE,KAAIH,YAAeS,eAEnBN,KAAIH,IAAO,EAAX,GAAqBd,QAErBiB,KAAIH,IAAO,EAAXpB,OAAqBO,KAAGwB,GA7B1BV,KAAA,KAAA,QAFGC,KAAK,wBAERf,GAAGiB,IAAI,wBAAyB,SAACC,EAAKG,GACpC,GAAIH,EAEF,MADAC,QAAQM,MAAMP,GACRA,EAERG,EAAMK,QAAQ,SAACJ,GAEbA,EAAKX,OAASgB,OAAOL,EAAKX,QAC1BW,EAAKM,cAAgBD,OAAOL,EAAKM,iBAGnCnB,EAAEF,OAAO,CACP,EACAP,GAAGuB,IAAIF,EAAO,SAAUX,GACtB,OAAOA,EAAEC,WAIbR,EAAEI,OACAP,GAAG6B,OAAOR,EAAO,SAAUX,GAEzB,OADAS,QAAQW,IAARC,QAAmBrB,EAAEkB,gBACdlB,EAAEkB,iBAIbZ,IAAIH,OAAO,QAAQS,KAAK,CAACD,IAAQP,KAAK,QAAS,QAAQA,KAAK,IAAKkB,OAEjEhB,IAAIH,OAAO,KAAKC,KAAK,YAAa,qBAAqBmB,KAAKjC,GAAGkC,WAAWzB,IAE1EO,IAAIH,OAAO,KAAKoB,KAAKjC,GAAGwB,SAASrB","file":"graphPlot.min.js","sourcesContent":["// define margin, width and height of the SVG\r\nconst margin = { top: 20, right: 20, bottom: 40, left: 50 };\r\nconst width = 600 - margin.left - margin.right;\r\nconst height = 400 - margin.top - margin.bottom;\r\n\r\nconst title = \"Runtime Function of Simple Recursive Nim Algorithm\";\r\n\r\nlet x = d3.scaleLinear().range([0, width]);\r\n\r\n// linearly scaled Y axis\r\nvar y = d3.scaleLinear().range([height, 0]);\r\n\r\n// for logarithmically scaled Y -axis\r\nvar y = d3.scaleLog().base(10).domain([1, 1000]).range([height, 0]);\r\n\r\n// create a horizontal and vertical line of graph\r\nlet lines = d3\r\n  .line()\r\n  .x(function (d) {\r\n    return x(d.number);\r\n  })\r\n  .y(function (d) {\r\n    return y(d.executionTime);\r\n  });\r\n\r\nd3.select(\"body\").append(\"h3\").attr(\"class\", \"graph-title\").text(title);\r\n\r\nvar svg = d3\r\n  .select(\"body\")\r\n  .append(\"svg\")\r\n  .attr(\"width\", 600)\r\n  .attr(\"height\", 400)\r\n  .append(\"g\")\r\n  .attr(\"transform\", `translate( ${margin.left} , ${margin.top})`);\r\n\r\n// add the label in x axis and y axis\r\nsvg\r\n  .append(\"text\")\r\n  .attr(\"class\", \"xaxis-label\")\r\n  .attr(\r\n    \"transform\",\r\n    \"translate(\" + 0.4 * width + \",\" + (height + margin.top + 10) + \")\"\r\n  )\r\n  .text(\"number of items in the heap\");\r\n\r\nsvg\r\n  .append(\"text\")\r\n  .attr(\"class\", \"yaxis-label\")\r\n  .attr(\"transform\", \"rotate(-90)\")\r\n  .attr(\"x\", 0 - 0.5 * height)\r\n  .attr(\"y\", 0 - margin.left - 5)\r\n  .attr(\"dy\", \"14px\")\r\n  .text(\"execution time (sec)\");\r\n\r\nd3.csv(\"files/timeRecord2.csv\", (err, value) => {\r\n  if (err) {\r\n    console.error(err);\r\n    throw err;\r\n  }\r\n  value.forEach((data) => {\r\n    // perform data manipulation and format\r\n    data.number = Number(data.number);\r\n    data.executionTime = Number(data.executionTime);\r\n  });\r\n\r\n  x.domain([\r\n    0,\r\n    d3.max(value, function (d) {\r\n      return d.number;\r\n    }),\r\n  ]);\r\n\r\n  y.domain(\r\n    d3.extent(value, function (d) {\r\n      console.log(typeof d.executionTime);\r\n      return d.executionTime;\r\n    })\r\n  );\r\n\r\n  svg.append(\"path\").data([value]).attr(\"class\", \"line\").attr(\"d\", lines);\r\n\r\n  svg.append(\"g\").attr(\"transform\", \"translate(0, 340)\").call(d3.axisBottom(x));\r\n\r\n  svg.append(\"g\").call(d3.axisLeft(y));\r\n});\r\n"]}