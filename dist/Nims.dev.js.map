{"version":3,"sources":["Nims.js"],"names":["require","performance","createCsvWriter","createObjectCsvWriter","csvWriter","path","header","id","title","records","number","time","t0","now","winner","n","i","t1","executionTime","writeRecords","console","log","err","error"],"mappings":";;eAAwBA,OAAO,CAAC,YAAD,C;IAAvBC,W,YAAAA,W;;AAER,IAAMC,eAAe,GAAGF,OAAO,CAAC,YAAD,CAAP,CAAsBG,qBAA9C;;AAEA,IAAI;AACF,GAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,YAAAA,SADP,GACmBF,eAAe,CAAC;AAChCG,cAAAA,IAAI,EAAE,sBAD0B;AAEhCC,cAAAA,MAAM,EAAE,CACN;AAAEC,gBAAAA,EAAE,EAAE,QAAN;AAAgBC,gBAAAA,KAAK,EAAE;AAAvB,eADM,EAEN;AACED,gBAAAA,EAAE,EAAE,MADN;AAEEC,gBAAAA,KAAK,EAAE;AAFT,eAFM;AAFwB,aAAD,CADlC;AAWOC,YAAAA,OAXP,GAWiB,CAAC;AAAEC,cAAAA,MAAM,EAAE,IAAV;AAAgBC,cAAAA,IAAI,EAAE;AAAtB,aAAD,CAXjB;AAaKC,YAAAA,EAbL,GAaUX,WAAW,CAACY,GAAZ,EAbV;;AAeOC,YAAAA,MAfP,GAegB,SAATA,MAAS,CAACC,CAAD,EAAO;AACpB,kBAAIA,CAAC,IAAI,CAAT,EAAY;AACV,uBAAO,IAAP;AACD;;AACD,kBAAIA,CAAC,IAAI,CAAT,EAAY;AACV,uBAAO,KAAP;AACD;;AACD,qBAAO,EAAED,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,IAAiBD,MAAM,CAACC,CAAC,GAAG,CAAL,CAAzB,CAAP;AACD,aAvBF;;AAyBUC,YAAAA,CAzBV,GAyBc,CAzBd;;AAAA;AAAA,kBAyBiBA,CAAC,GAAG,GAzBrB;AAAA;AAAA;AAAA;;AA0BGF,YAAAA,MAAM,CAACE,CAAD,CAAN;AACAC,YAAAA,EAAE,GAAGhB,WAAW,CAACY,GAAZ,EAAL;AACMK,YAAAA,aA5BT,GA4ByB,CAACD,EAAE,GAAGL,EAAN,IAAY,MA5BrC;AA6BGH,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,MAAX,GAAoBM,CAApB;AACAP,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkBO,aAAlB;AA9BH;AAAA,4CA+BSd,SAAS,CAACe,YAAV,CAAuBV,OAAvB,CA/BT;;AAAA;AAgCGW,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAaH,aAAb,GAA6B,IAAzC;;AAhCH;AAyB0BF,YAAAA,CAAC,EAzB3B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAmCD,CApCD,CAoCE,OAAOM,GAAP,EAAY;AACZF,EAAAA,OAAO,CAACG,KAAR,CAAcD,GAAd;AACA,QAAMA,GAAN;AACD","sourcesContent":["const { performance } = require(\"perf_hooks\");\r\n\r\nconst createCsvWriter = require(\"csv-writer\").createObjectCsvWriter;\r\n\r\ntry {\r\n  (async () => {\r\n    const csvWriter = createCsvWriter({\r\n      path: \"files/timeRecord.csv\",\r\n      header: [\r\n        { id: \"number\", title: \"Number of items\" },\r\n        {\r\n          id: \"time\",\r\n          title: \"execution time (sec)\",\r\n        },\r\n      ],\r\n    });\r\n    const records = [{ number: null, time: \"\" }];\r\n\r\n    let t0 = performance.now();\r\n\r\n    const winner = (n) => {\r\n      if (n == 0) {\r\n        return true;\r\n      }\r\n      if (n == 1) {\r\n        return false;\r\n      }\r\n      return !(winner(n - 1) && winner(n - 2));\r\n    };\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      winner(i);\r\n      t1 = performance.now();\r\n      const executionTime = (t1 - t0) / 1000.0;\r\n      records[0].number = i;\r\n      records[0].time = executionTime;\r\n      await csvWriter.writeRecords(records);\r\n      console.log(\"time is \" + executionTime + \" s\");\r\n    }\r\n  })();\r\n} catch (err) {\r\n  console.error(err);\r\n  throw err;\r\n}\r\n"],"file":"Nims.dev.js"}